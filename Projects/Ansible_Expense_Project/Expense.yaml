- name: Launching the EC2 AWS instances
  hosts: local
  connection: local
  gather_facts: false
  tasks:
  - name: Firing the script to launch instances
    ansible.builtin.shell: sh ec2.sh database

  - name: Update backend host IP
  vars_prompt:
    - name: new_ip
      prompt: "database"
      private: no
  
      replace:
        path: ./inventory.ini
        regexp: '^(?<=\[backend]\n).*'
        replace: '{{ new_ip }}'

- name: updating the Private Import
  hosts: 
# - name: MySQL Setup
#   hosts: database
#   become: yes
#   tasks:
#   - name: Installing MySQL
#     ansible.builtin.package:
#      name: mysql-server
#      state: present
    
#   - name: Start and Eanabling the MYSQL
#     ansible.builtin.service:
#      name: mysqld
#      state: started
#      enabled: true
#   - name: Setting up root password
#     ansible.builtin.shell: "mysql_secure_installation --set-root-pass ExpenseApp@1"
      
#   - name: Copy my config file to DB server
#     ansible.builtin.copy:
#       src: /root/Expense/.my.cnf
#       dest: /root/
#       owner: root
#       group: root
#       mode: "0600"


# - name: Backend setup
#   hosts: backend
#   become: yes
#   vars:
#     db_host: sql.sureshdevops.fun
#     db_root_user: root
#     db_root_password: "ExpenseApp@1"
#     db_user: expense
#     db_password: "ExpenseApp@1"
#     db_name: transactions

#   tasks:
#   - name: Disabling NodeJS Default Version 
#     ansible.builtin.command: dnf module disable nodejs -y
     
#   - name: Enabling the nodejs:20 version
#     ansible.builtin.command: dnf module enable nodejs:20 -y

#   - name: Installing the nodejs version
#     ansible.builtin.package:
#       name: nodejs
#       state: present

  
#   - name: Creating user
#     ansible.builtin.user:
#       name: expense
#       state: present

#   - name: Create app directory
#     ansible.builtin.file:
#       path: /app
#       state: directory
#       owner: expense
#       group: expense
#       mode: "0755" 

#   - name: Removing Old BE files
#     ansible.builtin.command: rm -f /app/*
   

#   - name: Downloading BE files
#     ansible.builtin.get_url:
#      url: https://expense-joindevops.s3.us-east-1.amazonaws.com/expense-backend-v2.zip
#      dest: /tmp/backend.zip

#   - name: extract backend files
#     ansible.builtin.unarchive:
#       src: /tmp/backend.zip
#       dest: /app
#       remote_src: yes

#   - name: install npm dependencies
#     community.general.npm:
#       path: /app
  
#   - name: Creating BE service and copying the file to systemd
#     ansible.builtin.copy:
#       src: /root/Expense/backend.service 
#       dest: /etc/systemd/system/
#       owner: root
#       group: root
#       mode: "0644"


#   - name: Daemon reload
#     ansible.builtin.systemd:
#       daemon-reload: yes

#   - name: Starting the BE service
#     ansible.builtin.service:
#      name: backend
#      state: started
#      enabled: true

#   - name: Installing mysql client
#     ansible.builtin.package:
#      name: mysql
#      state: present
    
   
    
#   - name: Import backend schema using shell
#     ansible.builtin.shell: "mysql -h database.sureshdevops.fun -uroot -pExpenseApp@1 < /app/schema/backend.sql"
     
    
#   - name: Restart Backend
#     ansible.builtin.service:
#      name: backend
#      state: restarted


# - name: frontend setup
#   hosts: frontend
#   become: yes
#   tasks:
#   - name: Installing NGINX
#     ansible.builtin.package:
#       name: nginx
#       state: present

#   - name: Starting the Web server
#     ansible.builtin.service:
#       name: nginx
#       state: started
#       enabled: true

#   - name: Delete default Web files
#     ansible.builtin.command: rm -rf /usr/share/nginx/html/*
  
#   - name: Downloading the required Web files
#     ansible.builtin.get_url:
#       url: https://expense-joindevops.s3.us-east-1.amazonaws.com/expense-frontend-v2.zip
#       dest: /tmp/frontend.zip

#   - name: Creating App Directory
#     ansible.builtin.command: mkdir -p /app

#   - name: Unzipping the required Web files
#     ansible.builtin.unarchive:
#       src: /tmp/frontend.zip
#       dest: /usr/share/nginx/html/
#       remote_src: yes
  
#   - name: Copying the conf file to Conf directory
#     ansible.builtin.copy:
#       src: /root/Expense/expense.conf
#       dest: /etc/nginx/default.d/
  
#   - name: Restarting the NGINX
#     ansible.builtin.service:
#       name: nginx
#       state: restarted
